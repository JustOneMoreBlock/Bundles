name: Initial Enabled Packs

on:
  schedule:
    - cron: '0 0 * * 3'  # Every Wednesday at midnight
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  initial-enabled-packs:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
      - name: Latest Snapshot Version
        id: get-version
        run: |
          echo "::group::Get version"
          VERSION=$(curl -s https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r '.latest.snapshot')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Server JAR URL
        id: get-url
        run: |
          echo "::group::Get URL"
          URL=$(curl -s https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r ".versions[] | select(.id == \"${{ steps.get-version.outputs.version }}\") | .url" | xargs -I{} curl -s {} | jq -r '.downloads.server.url')
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "::endgroup::"

      - name: Download Server JAR
        run: |
          curl -L ${{ steps.get-url.outputs.url }} -o ${{ steps.get-version.outputs.version }}.jar

      - name: Extract Downloaded JAR
        run: |
          unzip -o ${{ steps.get-version.outputs.version }}.jar

      - name: Extract Server JAR
        run: |
          unzip -o META-INF/versions/${{ steps.get-version.outputs.version }}/server-${{ steps.get-version.outputs.version }}.jar
          mkdir -p data/minecraft/datapacks/vanilla/

      - name: Get Bundles
        id: get-bundles
        run: |
          BUNDLES=$(ls data/minecraft/datapacks/ | paste -sd "," -)
          echo "bundles=$BUNDLES" >> $GITHUB_OUTPUT

      - name: Push bundles.txt to GitHub
        if: ${{ steps.get-bundles.outputs.bundles != '' }}
        uses: actions/github-script@v6
        with: 
          script: |
            const path = 'bundles.txt';
            const { version, bundles } = process.env;

            const { data } = await github.rest.repos.getContent({
              owner: context.repo.owner, 
              repo: context.repo.repo,
              path
            });

            const updatedContent = Buffer.from(bundles).toString('base64');

            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path,
              sha: data.sha,
              message: `Updating bundles.txt for Snapshot: ${version}`,
              content: updatedContent
            });
        env:
          version: ${{ steps.get-version.outputs.version }}
          bundles: ${{ steps.get-bundles.outputs.bundles }}

      - name: Push data.json to GitHub
        if: ${{ steps.get-version.outputs.version != '' && steps.get-url.outputs.url != '' && steps.get-bundles.outputs.bundles != '' }}
        uses: actions/github-script@v6
        with:
          script: |
            const path = 'data.json';
            const { version, url, bundles } = process.env;

            const datapack = {
              snapshot: version,
              server_jar: url,
              bundles: bundles
            };

            const newContent = Buffer.from(JSON.stringify(datapack, null, 2)).toString('base64');

            const { data } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path
            });

            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path,
              sha: data.sha,
              message: `Updating data.json for Snapshot ${version}`,
              content: newContent
            });
        env:
          version: ${{ steps.get-version.outputs.version }}
          url: ${{ steps.get-url.outputs.url }}
          bundles: ${{ steps.get-bundles.outputs.bundles }}
