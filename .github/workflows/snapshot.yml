name: Initial Enabled Packs

on:
  schedule:
    - cron: '* * * * *'
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  initial-enabled-packs:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
    
    - name: Latest Snapshot Version
      id: get-version
      run: |
        echo "::group::Get version"
        VERSION=$(curl -s https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r '.latest.snapshot')
        echo "version=$VERSION" >> $GITHUB_ENV
        echo "::set-output name=version::$VERSION"
        echo "::endgroup::"
        
    - name: Server JAR URL
      id: get-url
      run: |
        echo "::group::Get URL"
        URL=$(curl -s https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r ".versions[] | select(.id == \"${{ steps.get-version.outputs.version }}\") | .url" | xargs -I{} curl -s {} | jq -r '.downloads.server.url')
        echo ${{ steps.get-version.outputs.version }}
        echo "url=$URL" >> $GITHUB_OUTPUT
        echo "::endgroup::"
        
    - name: Download Server JAR
      run: |
        curl -L ${{ steps.get-url.outputs.url }} -o ${{ steps.get-version.outputs.version }}.jar

    - name: Extract Downloaded JAR
      run: |
        unzip -o ${{ steps.get-version.outputs.version }}.jar

    - name: Extract Server JAR
      run: |
        unzip -o META-INF/versions/${{ steps.get-version.outputs.version }}/server-${{ steps.get-version.outputs.version }}.jar
        mkdir -p data/minecraft/datapacks/vanilla/

    - name: Get Bundles 
      id: get-bundles
      run: |
        BUNDLES=$(ls --format=commas data/minecraft/datapacks/)
        echo "version=$BUNDLES" >> $GITHUB_ENV
        echo "::set-output name=bundles::$BUNDLES"
        
    - name: Push bundles.txt to GitHub
      uses: actions/github-script@v6
      with: 
        script: |
          const { version } = process.env
          const { bundles } = process.env
          const path = 'bundles.txt'
          
          // Get existing content
          const { data } = await github.rest.repos.getContent({
          owner: context.repo.owner, 
          repo: context.repo.repo,
          path   
          })
      
          // Update content
          const updatedContent = Buffer.from(version).toString('base64')
      
          // Commit update
          github.rest.repos.createOrUpdateFileContents({
            owner: context.repo.owner,
            repo: context.repo.repo,
            path,
            sha: data.sha,
            message: 'Updating bundles.txt for Snapshot: ${{ steps.get-version.outputs.version }}',
            content: updatedContent
            })
      env:
        bundles: ${{ steps.get-bundles.outputs.bundles }}

    - name: Push data.json to GitHub
      uses: actions/github-script@v6
      with:
        script: |
            const { version } = process.env
            const { bundles } = process.env
            const path = 'data.json'
      
            // Get existing content
            let content = {}
            const { data } = await github.rest.repos.getContent({
            owner: context.repo.owner,
            repo: context.repo.repo,
            path  
            })
      
            // Update version 
            const datapack = {
              "snapshot": "${{ steps.get-version.outputs.version }}",
              "server_jar": "${{ steps.get-url.outputs.url }}",
              "bundles": "${{ steps.get-bundles.outputs.bundles }}"
            }
      
            // Stringify new JSON
            const updatedDatapack = Buffer.from(JSON.stringify(datapack)).toString('base64')

            // Commit update
            github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path,
                sha: data.sha,
                message: 'Updating data.json for Snapshot ${{ steps.get-version.outputs.version }}',
                content: updatedDatapack 
            })
